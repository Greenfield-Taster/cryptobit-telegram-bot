const TelegramBot = require("node-telegram-bot-api");
const ExchangeRequest = require("../models/ExchangeRequest");
const User = require("../models/User");

let bot;
try {
  if (!process.env.TELEGRAM_BOT_TOKEN) {
    throw new Error("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env");
  }
  if (!process.env.TELEGRAM_CHAT_ID) {
    throw new Error("TELEGRAM_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env");
  }

  bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: false });
  console.log("Telegram –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
} catch (error) {
  console.error("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞:", error);
}

const sendToTelegram = async (message) => {
  if (!bot) {
    throw new Error("Telegram –±–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
  }

  try {
    const sentMessage = await bot.sendMessage(
      process.env.TELEGRAM_CHAT_ID,
      message,
      { parse_mode: "HTML" }
    );
    return sentMessage;
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:", error);
    throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram");
  }
};

exports.createExchangeRequest = async (req, res) => {
  let exchangeRequest;
  try {
    console.log("–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã:", req.body);

    const user = await User.findById(req.user.userId);

    if (!user) {
      return res.status(404).json({
        success: false,
        message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
      });
    }

    exchangeRequest = new ExchangeRequest({
      fromCrypto: req.body.fromCrypto,
      toCrypto: req.body.toCrypto,
      amount: parseFloat(req.body.amount),
      calculatedAmount: parseFloat(req.body.calculatedAmount),
      senderWallet: req.body.senderWallet,
      recipientWallet: req.body.recipientWallet,
      saveFromWallet: Boolean(req.body.saveFromWallet),
      orderId: req.body.orderId,
      userId: req.user.userId,
    });

    await exchangeRequest.save();
    console.log("–ó–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Å ID:", exchangeRequest._id);

    const message = `
<b>üîÑ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–±–º–µ–Ω #${exchangeRequest.orderId}</b>

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> ${user.nickname} 

üì§ <b>–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç:</b> ${exchangeRequest.fromCrypto}
üì• <b>–ü–æ–ª—É—á–∞–µ—Ç:</b> ${exchangeRequest.toCrypto}
üí∞ <b>–°—É–º–º–∞:</b> ${exchangeRequest.amount}
üíµ <b>–ö –ø–æ–ª—É—á–µ–Ω–∏—é:</b> ${exchangeRequest.calculatedAmount}

üîπ <b>–ö–æ—à–µ–ª–µ–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è:</b> 
<code>${exchangeRequest.senderWallet}</code>

‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ—à–µ–ª—å–∫–∏: ${exchangeRequest.saveFromWallet ? "‚úì" : "‚úó"}

‚è∞ <b>–í—Ä–µ–º—è:</b> ${new Date().toLocaleString()}
`;

    const sentMessage = await sendToTelegram(message);

    exchangeRequest.telegramMessageId = sentMessage.message_id;
    exchangeRequest.sentToTelegram = true;
    exchangeRequest.telegramSentAt = new Date();
    await exchangeRequest.save();

    res.status(200).json({
      success: true,
      message: "–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Telegram",
      requestId: exchangeRequest._id,
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏:", error);

    if (error.message.includes("Telegram") && exchangeRequest?._id) {
      res.status(500).json({
        success: false,
        message:
          "–ó–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞, –Ω–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Telegram. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞.",
        requestId: exchangeRequest._id,
      });
    } else {
      res.status(500).json({
        success: false,
        message: error.message || "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
      });
    }
  }
};

exports.getRequestById = async (req, res) => {
  try {
    const requestId = req.params.id;
    const userId = req.user.userId;

    const request = await ExchangeRequest.findById(requestId);

    if (!request) {
      return res.status(404).json({
        success: false,
        message: "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω",
      });
    }

    if (request.userId.toString() !== userId) {
      return res.status(403).json({
        success: false,
        message: "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É",
      });
    }

    res.json({
      success: true,
      data: request,
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞:", error);
    res.status(500).json({
      success: false,
      message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞",
    });
  }
};

// exports.getAllRequests = async (req, res) => {
//   try {
//     const requests = await ExchangeRequest.find()
//       .sort({ createdAt: -1 })
//       .limit(100);

//     res.json({
//       success: true,
//       data: requests,
//     });
//   } catch (error) {
//     console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫:", error);
//     res.status(500).json({
//       success: false,
//       message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫",
//     });
//   }
// };
