const TelegramBot = require("node-telegram-bot-api");
const ExchangeRequest = require("../models/ExchangeRequest");
const User = require("../models/User");

let bot;
try {
  if (!process.env.TELEGRAM_BOT_TOKEN) {
    throw new Error("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env");
  }
  if (!process.env.TELEGRAM_CHAT_ID) {
    throw new Error("TELEGRAM_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env");
  }

  bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: true });
  console.log("Telegram –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
} catch (error) {
  console.error("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞:", error);
}

const sendToTelegram = async (message, orderId) => {
  if (!bot) {
    console.error("–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:", bot);
    throw new Error("Telegram –±–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
  }

  try {
    console.log("–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram");
    console.log("Chat ID:", process.env.TELEGRAM_CHAT_ID);
    console.log("OrderId –¥–ª—è –∫–Ω–æ–ø–∫–∏:", orderId);

    const keyboard = {
      inline_keyboard: [
        [
          {
            text: "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É",
            callback_data: `confirm_payment:${orderId}`,
          },
        ],
      ],
    };

    const sentMessage = await bot.sendMessage(
      process.env.TELEGRAM_CHAT_ID,
      message,
      {
        parse_mode: "HTML",
        reply_markup: keyboard,
      }
    );

    console.log("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:", sentMessage);
    return sentMessage;
  } catch (error) {
    console.error("–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:", {
      error: error.message,
      code: error.code,
      description: error.description || "No description",
    });
    throw new Error(
      `–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram: ${error.message}`
    );
  }
};

bot.on("callback_query", async (callbackQuery) => {
  console.log("–ü–æ–ª—É—á–µ–Ω callback_query:", callbackQuery);
  const data = callbackQuery.data;
  const messageId = callbackQuery.message.message_id;

  if (data.startsWith("confirm_payment:")) {
    console.log("–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞");
    const orderId = data.split(":")[1];
    try {
      console.log("–ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–∞ —Å orderId:", orderId);

      const exchangeRequest = await ExchangeRequest.findOneAndUpdate(
        { orderId: orderId },
        {
          $set: {
            status: "completed",
            adminConfirmed: true,
            completedAt: new Date(),
          },
        },
        { new: true }
      );

      console.log("–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:", exchangeRequest);

      if (exchangeRequest) {
        const updatedMessage =
          callbackQuery.message.text + "\n\n‚úÖ –°—Ç–∞—Ç—É—Å: –û–ø–ª–∞—á–µ–Ω–æ";

        await bot.editMessageText(updatedMessage, {
          chat_id: process.env.TELEGRAM_CHAT_ID,
          message_id: messageId,
          parse_mode: "HTML",
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞",
                  callback_data: "payment_confirmed",
                },
              ],
            ],
          },
        });

        console.log("–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ");

        await bot.answerCallbackQuery(callbackQuery.id, {
          text: "–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞",
          show_alert: true,
        });
      } else {
        console.log("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω");
        await bot.answerCallbackQuery(callbackQuery.id, {
          text: "–û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω",
          show_alert: true,
        });
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞:", error);
      await bot.answerCallbackQuery(callbackQuery.id, {
        text: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞",
        show_alert: true,
      });
    }
  }
});

exports.createExchangeRequest = async (req, res) => {
  let exchangeRequest;
  try {
    console.log("–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã:", req.body);

    const user = await User.findById(req.user.userId);

    if (!user) {
      return res.status(404).json({
        success: false,
        message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
      });
    }

    exchangeRequest = new ExchangeRequest({
      fromCrypto: req.body.fromCrypto,
      toCrypto: req.body.toCrypto,
      amount: parseFloat(req.body.amount),
      calculatedAmount: parseFloat(req.body.calculatedAmount),
      senderWallet: req.body.senderWallet,
      recipientWallet: req.body.recipientWallet,
      saveFromWallet: Boolean(req.body.saveFromWallet),
      orderId: req.body.orderId,
      userId: req.user.userId,
    });

    await exchangeRequest.save();
    console.log("–ó–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Å ID:", exchangeRequest._id);

    const message = `
<b>üîÑ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–±–º–µ–Ω #${exchangeRequest.orderId}</b>

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> ${user.nickname} 

üì§ <b>–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç:</b> ${exchangeRequest.fromCrypto}
üì• <b>–ü–æ–ª—É—á–∞–µ—Ç:</b> ${exchangeRequest.toCrypto}
üí∞ <b>–°—É–º–º–∞:</b> ${exchangeRequest.amount}
üíµ <b>–ö –ø–æ–ª—É—á–µ–Ω–∏—é:</b> ${exchangeRequest.calculatedAmount}

üîπ <b>–ö–æ—à–µ–ª–µ–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è:</b> 
<code>${exchangeRequest.senderWallet}</code>

‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ—à–µ–ª—å–∫–∏: ${exchangeRequest.saveFromWallet ? "‚úì" : "‚úó"}

‚è∞ <b>–í—Ä–µ–º—è:</b> ${new Date().toLocaleString()}
`;

    const sentMessage = await sendToTelegram(message, exchangeRequest.orderId);

    exchangeRequest.telegramMessageId = sentMessage.message_id;
    exchangeRequest.sentToTelegram = true;
    exchangeRequest.telegramSentAt = new Date();
    await exchangeRequest.save();

    res.status(200).json({
      success: true,
      message: "–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Telegram",
      requestId: exchangeRequest._id,
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏:", error);

    if (error.message.includes("Telegram") && exchangeRequest?._id) {
      res.status(500).json({
        success: false,
        message:
          "–ó–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞, –Ω–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Telegram. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞.",
        requestId: exchangeRequest._id,
      });
    } else {
      res.status(500).json({
        success: false,
        message: error.message || "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
      });
    }
  }
};

exports.getRequestById = async (req, res) => {
  try {
    const requestId = req.params.id;
    const userId = req.user.userId;

    const request = await ExchangeRequest.findById(requestId);

    if (!request) {
      return res.status(404).json({
        success: false,
        message: "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω",
      });
    }

    if (request.userId.toString() !== userId) {
      return res.status(403).json({
        success: false,
        message: "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É",
      });
    }

    res.json({
      success: true,
      data: request,
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞:", error);
    res.status(500).json({
      success: false,
      message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞",
    });
  }
};
